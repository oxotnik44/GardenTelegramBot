import asyncio
from telegram import BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from config import ALLOWED_USER_IDS, TOKEN
from handlers import handle_text, button_callback, products, useful, question, start
from modules.photo_handler import handle_photo
from modules.useful_handler import handle_photo_useful
from modules.video_handler import handle_video

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ç–æ
first_photo_has_tag = None
# –§–ª–∞–≥–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
pending_tag = False
pending_interesting = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–µ–æ
first_video_has_tag = None


async def handle_video_with_tag(update, context):
    global first_video_has_tag, pending_tag, pending_interesting

    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ.")
        return

    message_text = update.message.caption.lower() if update.message.caption else ""
    tag = None

    if pending_tag:
        tag = "@—Ç–æ–≤–∞—Ä—ã"
        print(
            f"–í–∏–¥–µ–æ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ —Å @—Ç–æ–≤–∞—Ä—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å single_tag='@—Ç–æ–≤–∞—Ä—ã'. ID: {update.message.video.file_id}"
        )
    elif pending_interesting:
        tag = "@–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"
        print(
            f"–í–∏–¥–µ–æ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ —Å @–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å single_tag='@–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ'. ID: {update.message.video.file_id}"
        )
    else:
        if "@—Ç–æ–≤–∞—Ä—ã" in message_text:
            tag = "@—Ç–æ–≤–∞—Ä—ã"
            first_video_has_tag = True
        elif "@–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ" in message_text:
            tag = "@–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"
            first_video_has_tag = False
        else:
            first_video_has_tag = False
            print(
                f"‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. ID: {update.message.video.file_id}"
            )
            return

    await handle_video(update, context, single_tag=tag)


async def text_message_handler(update, context):
    global pending_tag, pending_interesting, first_photo_has_tag
    text = update.message.text.lower()

    first_photo_has_tag = None

    if "@—Ç–æ–≤–∞—Ä—ã" in text:
        print("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ @—Ç–æ–≤–∞—Ä—ã")
        pending_tag = True
        pending_interesting = False
    elif "@–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ" in text:
        print("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ @–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ")
        pending_interesting = True
        pending_tag = False
    else:
        pending_tag = False
        pending_interesting = False
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–æ–≤, —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤")

    await handle_text(update, context)


async def handle_photo_with_tag(update, context):
    global first_photo_has_tag, pending_tag, pending_interesting

    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")
        return

    message_text = update.message.caption.lower() if update.message.caption else ""

    if pending_tag:
        print(
            f"–§–æ—Ç–æ –ø–æ—Å–ª–µ @—Ç–æ–≤–∞—Ä—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ handle_photo. ID: {update.message.photo[-1].file_id}"
        )
        await handle_photo(update, context, force_tag=True)
    elif pending_interesting:
        print(
            f"–§–æ—Ç–æ –ø–æ—Å–ª–µ @–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ handle_photo_useful. ID: {update.message.photo[-1].file_id}"
        )
        await handle_photo_useful(update, context, force_tag=True)
    else:
        if "@—Ç–æ–≤–∞—Ä—ã" in message_text:
            first_photo_has_tag = True
        elif "@–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ" in message_text:
            first_photo_has_tag = False

        if first_photo_has_tag is None:
            first_photo_has_tag = False

        if first_photo_has_tag:
            print(
                f"–¢–µ–≥ @—Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω. –§–æ—Ç–æ –≤ handle_photo. ID: {update.message.photo[-1].file_id}"
            )
            await handle_photo(update, context)
        else:
            print(
                f"–¢–µ–≥ @—Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –§–æ—Ç–æ –≤ handle_photo_useful. ID: {update.message.photo[-1].file_id}"
            )
            await handle_photo_useful(update, context)


# Post-init –∫–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ —Å —ç–º–æ–¥–∑–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
async def set_commands(application: Application) -> None:
    await application.bot.set_my_commands([
        BotCommand("question", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"),
        BotCommand("products", "üåø üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
        BotCommand("useful", "üí° –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    ])


def main() -> None:
    # –°—Ç—Ä–æ–∏–º Application –∏ –ø–µ—Ä–µ–¥–∞—ë–º post_init
    app = (
        Application
        .builder()
        .token(TOKEN)
        .post_init(set_commands)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º CommandHandler‚Äô—ã
    app.add_handler(CommandHandler("question", question))
    app.add_handler(CommandHandler("products", products))
    app.add_handler(CommandHandler("useful", useful))
    app.add_handler(CommandHandler("start", start))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo_with_tag))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video_with_tag))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, text_message_handler))
    app.add_handler(CallbackQueryHandler(button_callback))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()  # –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è


if __name__ == "__main__":
    main()
