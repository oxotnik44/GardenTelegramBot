import datetime
import uuid
import json
import os

STORAGE_FILE = "storageData.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
user_data = {"photos": [], "questions": []}
user_data_useful = {
    "useful_photo": [],
    "useful_text": [],
    "useful_video": []  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–∏–¥–µ–æ
}
group_buffer_useful = {}
group_buffer = {}
product_photos = []   # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤
product_videos = []   # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–æ–≤


def default_serializer(obj):
    if isinstance(obj, datetime.datetime):
        return obj.isoformat()
    raise TypeError(f"–û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ {type(obj)} –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º")


def delete_record_by_storage(tag, record_uuid):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ uuid –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ (question, useful, product).
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª.
    """
    load_storage_data()

    def remove_by_uuid(records):
        return [r for r in records if r.get("uuid") != record_uuid]

    if tag == "question":
        user_data["questions"] = remove_by_uuid(user_data["questions"])
        print(f"üóë –£–¥–∞–ª—ë–Ω –≤–æ–ø—Ä–æ—Å —Å uuid {record_uuid}")

    elif tag == "useful":
        user_data_useful["useful_photo"] = remove_by_uuid(
            user_data_useful["useful_photo"])
        user_data_useful["useful_text"] = remove_by_uuid(
            user_data_useful["useful_text"])
        user_data_useful["useful_video"] = remove_by_uuid(
            user_data_useful.get("useful_video", []))
        print(f"üóë –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å uuid {record_uuid} (–µ—Å–ª–∏ –±—ã–ª–∏)")

    elif tag == "product":
        global product_photos, product_videos
        product_photos = remove_by_uuid(product_photos)
        product_videos = remove_by_uuid(product_videos)
        print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞ —Å uuid {record_uuid}")

    else:
        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–≥ {tag}")
        return

    save_storage_data()


def load_storage_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ STORAGE_FILE –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    global user_data, user_data_useful, group_buffer_useful, group_buffer, product_photos, product_videos
    if os.path.exists(STORAGE_FILE):
        try:
            with open(STORAGE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            user_data = data.get("user_data", {"photos": [], "questions": []})
            user_data_useful = data.get("user_data_useful", {
                "useful_photo": [],
                "useful_text": [],
                "useful_video": []
            })
            group_buffer_useful = data.get("group_buffer_useful", {})
            group_buffer = data.get("group_buffer", {})
            product_photos = data.get("product_photos", [])
            product_videos = data.get("product_videos", [])
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            for q in user_data.get("questions", []):
                if isinstance(q.get("saved_date"), str):
                    try:
                        q["saved_date"] = datetime.datetime.fromisoformat(
                            q["saved_date"])
                    except Exception:
                        pass
            for key in ("useful_photo", "useful_text", "useful_video"):
                for r in user_data_useful.get(key, []):
                    if isinstance(r.get("saved_date"), str):
                        try:
                            r["saved_date"] = datetime.datetime.fromisoformat(
                                r["saved_date"])
                        except Exception:
                            pass
            for p in product_photos:
                if isinstance(p.get("saved_date"), str):
                    try:
                        p["saved_date"] = datetime.datetime.fromisoformat(
                            p["saved_date"])
                    except Exception:
                        pass
            for v in product_videos:
                if isinstance(v.get("saved_date"), str):
                    try:
                        v["saved_date"] = datetime.datetime.fromisoformat(
                            v["saved_date"])
                    except Exception:
                        pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        print(
            f"‚ö†Ô∏è –§–∞–π–ª {STORAGE_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")


def save_storage_data():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª STORAGE_FILE.
    –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç—ã datetime —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ ISO-—Ñ–æ—Ä–º–∞—Ç.
    """
    data = {
        "user_data": user_data,
        "user_data_useful": user_data_useful,
        "group_buffer_useful": group_buffer_useful,
        "group_buffer": group_buffer,
        "product_photos": product_photos,
        "product_videos": product_videos,
    }
    try:
        with open(STORAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, default=default_serializer,
                      ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def filter_old_records(records, days=30):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.
    –ï—Å–ª–∏ –ø–æ–ª–µ saved_date –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫–æ–π, –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ datetime.
    –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª.
    """
    now = datetime.datetime.now()
    filtered = []
    for r in records:
        saved_date = r.get("saved_date")
        if isinstance(saved_date, str):
            try:
                saved_date = datetime.datetime.fromisoformat(saved_date)
            except Exception:
                continue
        if isinstance(saved_date, datetime.datetime):
            if (now - saved_date).days <= days:
                filtered.append(r)
    if len(filtered) != len(records):
        records[:] = filtered
        save_storage_data()


def save_user_message(user_id, item, tag):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π uuid –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.
    –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    –î–ª—è tag='useful' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏ –≤–∏–¥–µ–æ.
    –î–ª—è tag='product' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.
    """
    load_storage_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    now = datetime.datetime.now()
    record_uuid = str(uuid.uuid4())

    if tag == "question" and isinstance(item, dict) and "text" in item:
        question_text = item["text"].strip()
        if question_text and "?" in question_text and question_text != "?":
            user_data["questions"].append({
                "user_id": user_id,
                "text": question_text,
                "message_id": item["message_id"],
                "saved_date": now,
                "uuid": record_uuid
            })
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {question_text}")

    elif tag == "useful":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ
        if "photo" in item:
            key = "useful_photo"
            value = item.get("photo")
        elif "text" in item:
            key = "useful_text"
            value = item.get("text")
        elif "video" in item:
            key = "useful_video"
            value = item.get("video")
        else:
            print("‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return
        user_data_useful[key].append({
            ("photo" if key == "useful_photo" else ("text" if key == "useful_text" else "video")): value,
            "saved_date": now,
            "uuid": record_uuid
        })
        print(
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω {'—Ñ–æ—Ç–æ' if key == 'useful_photo' else ('—Ç–µ–∫—Å—Ç' if key == 'useful_text' else '–≤–∏–¥–µ–æ')}: {value}")

    elif tag == "product":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
        if isinstance(item, dict) and "video" in item:
            product_videos.append({
                "video": item["video"],
                "saved_date": now,
                "uuid": record_uuid
            })
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∏–¥–µ–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
        elif isinstance(item, dict) and "photo" in item:
            product_photos.append({
                "photo": item["photo"],
                "saved_date": now,
                "uuid": record_uuid
            })
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
            product_photos.append({
                "photo": item,
                "saved_date": now,
                "uuid": record_uuid
            })
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    else:
        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–≥ {tag}")
        return

    save_storage_data()


def get_user_message(tag, filter_tag=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ STORAGE_FILE, –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ,
    —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–≥—É.
    –î–ª—è tag='useful' –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ (–ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ filter_tag).
    –î–ª—è tag='product' –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫.
    """
    load_storage_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞

    if tag == "question":
        filter_old_records(user_data["questions"])
        save_storage_data()
        return user_data["questions"]

    elif tag == "useful":
        filter_old_records(user_data_useful["useful_photo"])
        filter_old_records(user_data_useful["useful_text"])
        filter_old_records(user_data_useful.get("useful_video", []))
        save_storage_data()
        valid_photos = [r["photo"] for r in user_data_useful["useful_photo"]]
        valid_texts = [r["text"] for r in user_data_useful["useful_text"]]
        valid_videos = [r["video"]
                        for r in user_data_useful.get("useful_video", [])]
        if filter_tag == "photo":
            return valid_photos
        elif filter_tag == "text":
            return valid_texts
        elif filter_tag == "video":
            return valid_videos
        else:
            return {
                "useful_photo": valid_photos,
                "useful_text": valid_texts,
                "useful_video": valid_videos
            }

    elif tag == "product":
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤–∏–¥–µ–æ
        filter_old_records(product_photos)
        filter_old_records(product_videos)
        save_storage_data()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        products = []
        for p in product_photos:
            products.append({
                "type": "photo",
                "media": p["photo"],
                "saved_date": p["saved_date"],
                "uuid": p["uuid"]
            })
        for v in product_videos:
            products.append({
                "type": "video",
                "media": v["video"],
                "saved_date": v["saved_date"],
                "uuid": v["uuid"]
            })
        return products

    return []
